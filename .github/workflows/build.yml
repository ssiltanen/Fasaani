name: Fasaani .NET Core CI
on:
  push:
    paths-ignore:
    - '.vscode/**'
    - '.editorconfig'
    - '.gitignore'
    - 'azuredeploysettings-template.json'
    - 'build.fsx'
    - 'build.fsx.lock'
    - 'README.md'
    - 'RELEASE_NOTES.md'
  pull_request:
  release:
    types:
    - published
env:
  # General settings
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  PROJECT_NAME: Fasaani
  DOTNET_VERSION: 3.1.301
  # GitHub settings
  GITHUB_FEED: https://nuget.pkg.github.com/fasaani/
  GITHUB_USER: ssiltanen
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Nuget settings
  NUGET_FEED: https://api.nuget.org/v3/index.json
  NUGET_KEY: ${{ secrets.NUGET_KEY }}
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: # Build and test with all three OS
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Tool Restore
        run: dotnet tool restore
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build -c Release --no-restore
      - name: Test
        run: dotnet run -c Release --no-build -p src/${{ env.PROJECT_NAME }}.Test
      - name: Pack
        if: matrix.os == 'ubuntu-latest' # Use only one OS to pack and use ubuntu since it is fastest
        run: dotnet pack -c Release --no-build --include-symbols --include-source -v normal  /p:Version=$GITHUB_RUN_ID.0.0 src/$PROJECT_NAME/$PROJECT_NAME.*proj
      - name: Upload Artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: nupkg
          path: ./src/${{ env.PROJECT_NAME }}/bin/Release/*.nupkg
  # dev branch being prerelease cutting edge version
  # Deploy only to github artifacts
  prerelease:
    needs: build
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: nupkg
      - name: Push to GitHub Feed
        run: |
          for f in ./nupkg/*.nupkg
          do
            curl -vX PUT -u "$GITHUB_USER:$GITHUB_TOKEN" -F package=@$f $GITHUB_FEED
          done
  # Deploy releases to nuget and github
  deploy:
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Create Release NuGet package
        run: |
          dotnet pack -v normal -c Release --include-symbols --include-source /p:Version=${{ github.event.release.tag_name }} -o nupkg src/$PROJECT_NAME/$PROJECT_NAME.*sproj
      - name: Push to GitHub Feed
        run: |
          for f in ./nupkg/*.nupkg
          do
            curl -vX PUT -u "$GITHUB_USER:$GITHUB_TOKEN" -F package=@$f $GITHUB_FEED
          done
      - name: Push to NuGet Feed
        run: dotnet nuget push ./nupkg/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY
